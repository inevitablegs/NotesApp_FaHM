Directory structure:
└── NotesApp/
    ├── main.py
    ├── config/
    │   └── db.py
    ├── models/
    │   └── note.py
    ├── routes/
    │   └── routes.py
    └── schemas/
        └── note.py

================================================
FILE: main.py
================================================
from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles
from routes.routes import note

app = FastAPI()
app.include_router(note)

app.mount("/static", StaticFiles(directory="static"), name="static")


================================================
FILE: config/db.py
================================================
from pymongo import MongoClient

MONGODB_URI="mongodb+srv://sonawaneganu3101:ganu3101@notesapp.pds9b3r.mongodb.net/Notes"

conn = MongoClient(MONGODB_URI)


================================================
FILE: models/note.py
================================================
from pydantic import BaseModel


class Note(BaseModel):
    no: int
    title: str
    desc: str
    imp: bool


================================================
FILE: routes/routes.py
================================================
from fastapi import APIRouter, Request
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates

from models.note import Note
from config.db import conn
from schemas.note import noteEntity, notesEntity

note = APIRouter()
templates = Jinja2Templates(directory="templates")


@note.get("/", response_class=HTMLResponse)
async def read_root(request:Request):
    docList = []
    docs = conn.notes.notes.find({})
    for doc in docs:
        docList.append({
            "id": doc["_id"],
            "no": doc["no"],
            "title": doc["title"],
            "desc": doc["desc"],
            "imp": doc["imp"]
        })
    return templates.TemplateResponse(request=request, name="index.html", context={"request": request, "docList": docList})


@note.post("/")
async def create_note(request=Request):
    form = await request.form()
    formDict = dict(form)
    formDict["important"] = True if formDict["important"] == "on" else False
    note = conn.notes.notes.insert_one(formDict)
    return {"Success": True}


================================================
FILE: schemas/note.py
================================================
def noteEntity(item) -> dict:
    return {
        "id": str(item["_id"]),
        "no": item["no"],
        "title": item["title"],
        "desc": item["desc"],
        "imp": item["imp"]
    }
    
    
def notesEntity(items) -> list:
    return [noteEntity(item) for item in items]

